{"version":3,"file":"utils.js","sources":["../src/utils/CryptographyUtils.ts","../src/utils/getAppAccess.ts","../src/utils/iframeUtils.ts","../src/utils/isThenable.tsx","../src/utils/NavigationMetrics.tsx","../src/utils/routing.ts","../src/utils/TestUtils.ts","../src/utils/WorkspaceUtils.ts","../src/utils/TypeUtils.ts"],"sourcesContent":["export class CryptographyUtils {\n  public static byteArrayToBase64String(bytes: ArrayBuffer): string {\n    return btoa(String.fromCharCode(...new Uint8Array(bytes)));\n  }\n\n  public static base64StringToByteArray(base64str: string): ArrayBuffer {\n    return Uint8Array.from(atob(base64str), (c) => c.charCodeAt(0));\n  }\n\n  public static importRsaOaepKey(key: string): Promise<CryptoKey> {\n    const keyData = CryptographyUtils.base64StringToByteArray(key);\n    return window.crypto.subtle.importKey('spki', keyData, { name: 'RSA-OAEP', hash: 'SHA-256' }, true, ['encrypt']);\n  }\n\n  /**\n   * Generates an AES-GCM key to be used for encrypting messages\n   */\n  public static generateAesGcmKey(): Promise<CryptoKey> {\n    return window.crypto.subtle.generateKey(\n      {\n        name: 'AES-GCM',\n        length: 256,\n      },\n      true,\n      ['encrypt', 'decrypt'],\n    );\n  }\n\n  public static async exportAndWrapKey(keyToBeWrapped: CryptoKey, wrappingKey: CryptoKey): Promise<string> {\n    const rawData = await window.crypto.subtle.exportKey('raw', keyToBeWrapped);\n    const encrypted = await window.crypto.subtle.encrypt('RSA-OAEP', wrappingKey, rawData);\n    return CryptographyUtils.byteArrayToBase64String(encrypted);\n  }\n\n  /**\n   * Encrypts the provided message with the provided key using AES-GCM encryption\n   *\n   * Returns the base64 encoded string of the 12-bit IV followed by the encrypted message\n   *\n   * @param key AES-GCM CryptoKey to be used for encryption\n   * @param msg The message to be encrypted\n   */\n  public static async encryptMessage(msg: string, key: CryptoKey): Promise<string> {\n    const enc = new TextEncoder();\n    const encodedMsg = enc.encode(msg);\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n    const encryptedMsg = await window.crypto.subtle.encrypt(\n      {\n        name: 'AES-GCM',\n        iv: iv,\n      },\n      key,\n      encodedMsg,\n    );\n    return CryptographyUtils.byteArrayToBase64String(new Uint8Array([...iv, ...new Uint8Array(encryptedMsg)]));\n  }\n}\n","import type { AppAccessConfig, AppKey } from '../settings';\nimport { SQLA_APP_KEY, WORKSPACE_APP_KEY, ML_APP_KEY } from '../settings';\n\nexport type AppAccess = {\n  [m in AppKey]: {\n    availableInEnvironment: boolean;\n    allowed: boolean;\n  };\n};\n\n/**\n * Check if persona is available on environment (also visibility) and if the current user is allowed to use the\n * persona / product.\n */\nexport function getAppAccess(config: AppAccessConfig): AppAccess {\n  const {\n    userCanUseDatabricksWorkspace,\n    userCanUseSqlService,\n    enableSqlService,\n    centralizedLoginEnabled: isMultiTenant,\n  } = config;\n  const environmentSupportsSqlService = Boolean(enableSqlService && isMultiTenant);\n  const canUseSql = Boolean(userCanUseSqlService && environmentSupportsSqlService);\n  // If the userCanUseDatabricksWorkspace is not present in the config (for old webapp envs),\n  // assume true.\n  const canUseWorkspace = !isMultiTenant || !canUseSql || userCanUseDatabricksWorkspace !== false;\n\n  return {\n    [SQLA_APP_KEY]: {\n      availableInEnvironment: environmentSupportsSqlService,\n      allowed: environmentSupportsSqlService && canUseSql,\n    },\n    [WORKSPACE_APP_KEY]: {\n      availableInEnvironment: true,\n      allowed: canUseWorkspace,\n    },\n    [ML_APP_KEY]: {\n      availableInEnvironment: true,\n      allowed: Boolean(canUseWorkspace),\n    },\n  };\n}\n","export const MLFLOW_IFRAME_ID = 'mlflow-iframe-id';\nexport const FEATURE_STORE_IFRAME_ID = 'feature-store-iframe-id';\n","export type Thenable = {\n  then: (resolve: () => unknown, reject?: () => unknown) => unknown;\n};\n\nexport function isThenable(val: unknown): Thenable | null {\n  // Proper way to detect if something is a promise (thenable): https://stackoverflow.com/a/27746324\n  // See also React: https://github.com/facebook/react/blob/cae635054e17a6f107a39d328649137b83f25972/packages/jest-react/src/internalAct.js#L70-L72\n  if (val !== null && typeof val === 'object' && typeof (val as any).then === 'function') {\n    return val as any;\n  }\n  return null;\n}\n","export function getNavigationTimings(): Record<string, string | number | null> {\n  const timing = window.performance.timing;\n  return {\n    navigationType: window.performance.navigation.type,\n    navigationStartTimestamp: timing.navigationStart,\n    requestStartTimestamp: timing.requestStart,\n    responseStartTimestamp: timing.responseStart,\n    domLoadingTimestamp: timing.domLoading,\n    domContentLoadedEventStartTimestamp: timing.domContentLoadedEventStart,\n    domContentLoadedEventEndTimestamp: timing.domContentLoadedEventEnd,\n    domCompleteTimestamp: timing.domComplete,\n    loadEventEndTimestamp: timing.loadEventEnd,\n  };\n}\n","export const SQL_BASE_ROUTE = '/sql';\n\n// These are routing constants that are applicable to redash but could be potentially used more globally.\n// Specifically, the persona nav needs to use the history route for user.\nexport const HISTORY_KEY = 'history';\n\nexport function getHistoryRouteBase(): 'history' {\n  return HISTORY_KEY;\n}\n\nexport function getHistoryRouteForUser(userId: number | string): string {\n  return `${getHistoryRouteBase()}?userId=${userId}`;\n}\n\nexport function getHistoryRouteForLakehouse(lakehouseId: string): string {\n  return `${getHistoryRouteBase()}?endpointId=${lakehouseId}`;\n}\n\nexport function getHistoryQueryDetailsLink(lookupKey: string) {\n  const params = new URLSearchParams({\n    lookupKey: lookupKey,\n  });\n\n  return `${getHistoryRouteBase()}?${params.toString()}`;\n}\n","/**\n * This is required because jsdom does not populate the `origin`\n * field of the `MessageEvent`, when `postMessage` is called. However,\n * this `origin` plays an important role in ensuring the application is\n * secure and therefore we need to fix the `origin` in our testing.\n *\n * @param origin The desired origin for all posted messages\n * @returns\n */\nexport function patchMessageEventOrigin(origin: string) {\n  const listener = (e: MessageEvent) => {\n    if (e.origin !== '') {\n      return;\n    }\n    e.stopImmediatePropagation();\n    const patchedEvent = new MessageEvent('message', { data: e.data, origin });\n    window.dispatchEvent(patchedEvent);\n  };\n  window.addEventListener('message', listener);\n  return () => window.removeEventListener('message', listener);\n}\n","export interface WorkspaceDescriptor {\n  azureLocation: string;\n  deploymentName: string;\n  name: string;\n  needsConfirmation: boolean;\n  orgId: number;\n  owner?: string;\n  useRegionalUrl: boolean;\n  isComplianceMode?: boolean;\n}\n\nfunction stringifyQueryParams(queryParams: Record<string, string>) {\n  const queryParamKeys = Object.keys(queryParams);\n  return queryParamKeys.length > 0\n    ? `?${Object.keys(queryParams)\n        .map((key) => `${key}=${queryParams[key]}`)\n        .join('&')}`\n    : '';\n}\n\nexport class WorkspaceUtils {\n  public static getHostname() {\n    return window.location.hostname;\n  }\n\n  /**\n   * Returns the URL used to select a workspace to switch to\n   * If useAbsoluteUrlForWorkspaceSelection is true, returns absolute URL. If returned URL has\n   * different hostname than current hostname, path is /aad/auth to avoid user having to click login\n   * on per-workspace URL.\n   *\n   * @param workspace {object} that contains {deploymentName: string, orgId: int,\n   *                   azureLocation: string, useRegionalUrl: boolean}\n   * @param useAbsoluteUrlForWorkspaceSelection {boolean} whether to return absolute URL or relative\n   *        URL\n   * @param domainSuffix {string} suffix to be used if constructing absolute URL\n   * @param basePath {string} base path to be included in the workspace URL\n   *\n   * @returns URL to be used in link to workspace\n   */\n  public static getSwitchWorkspaceUrl(\n    workspace: WorkspaceDescriptor,\n    useAbsoluteUrlForWorkspaceSelection: boolean,\n    domainSuffix: string,\n    basePath = '/',\n  ) {\n    const queryParams: Record<string, string> = { o: `${workspace.orgId}` };\n    if (useAbsoluteUrlForWorkspaceSelection) {\n      const prefix = workspace.useRegionalUrl ? workspace.azureLocation : workspace.deploymentName;\n      if (!workspace.useRegionalUrl) {\n        delete queryParams.o;\n      }\n      const targetHostname = prefix + '.' + domainSuffix;\n      let path = basePath;\n      if (WorkspaceUtils.getHostname() !== targetHostname) {\n        path = '/aad/auth';\n        if (basePath !== '/') {\n          queryParams.next_url = btoa(basePath);\n        }\n      }\n      return `https://${targetHostname}${path}${stringifyQueryParams(queryParams)}`;\n    }\n    return `${basePath}${stringifyQueryParams(queryParams)}`;\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport type DeepPartial<T> = T extends object ? { [K in keyof T]?: DeepPartial<T[K]> } : T;\n\n/**\n * Converts a constant snake_case string type to a camelCase one\n * Example Input: `a_string_type`\n * Output: `aStringType`\n */\nexport type SnakeToCamelCase<S extends string> = S extends `${infer T}_${infer U}`\n  ? `${T}${Capitalize<SnakeToCamelCase<U>>}`\n  : S;\n\n/**\n * Coverts all keys of given `ObjectType` from snake_case to camelCase\n * Example Input: `{ foo_bar: string, xyz_abc_baz: number }`\n * Output: `{ fooBar: string, xyzAbcBaz: number }`\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type SnakeToCamelCaseProperties<ObjectType extends object> = {\n  [Key in keyof ObjectType as SnakeToCamelCase<Key & string>]: ObjectType[Key];\n};\n\n/**\n * Makes some of the properties of an object, required\n * Example Input: `{ foo?: string; bar?: string; baz?: string; id: string }`\n * Output: `{ foo: string; bar: string; baz?: string; id: string }`\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type RequireProperties<T extends object, K extends keyof T> = Omit<T, K> & {\n  [MK in K]-?: NonNullable<T[MK]>;\n};\n\n/**\n * \"Type safer\" `Object.entries`\n */\nexport function objectEntries<T>(object: T): [keyof T, T[keyof T]][] {\n  return Object.entries(object) as [keyof T, T[keyof T]][];\n}\n"],"names":["CryptographyUtils","byteArrayToBase64String","bytes","btoa","String","fromCharCode","Uint8Array","base64StringToByteArray","base64str","from","atob","c","charCodeAt","importRsaOaepKey","key","keyData","window","crypto","subtle","importKey","name","hash","generateAesGcmKey","generateKey","length","exportAndWrapKey","keyToBeWrapped","wrappingKey","rawData","exportKey","encrypted","encrypt","encryptMessage","msg","enc","TextEncoder","encodedMsg","encode","iv","getRandomValues","encryptedMsg","getAppAccess","config","userCanUseDatabricksWorkspace","userCanUseSqlService","enableSqlService","centralizedLoginEnabled","isMultiTenant","environmentSupportsSqlService","Boolean","canUseSql","canUseWorkspace","SQLA_APP_KEY","availableInEnvironment","allowed","WORKSPACE_APP_KEY","ML_APP_KEY","MLFLOW_IFRAME_ID","FEATURE_STORE_IFRAME_ID","isThenable","val","then","getNavigationTimings","timing","performance","navigationType","navigation","type","navigationStartTimestamp","navigationStart","requestStartTimestamp","requestStart","responseStartTimestamp","responseStart","domLoadingTimestamp","domLoading","domContentLoadedEventStartTimestamp","domContentLoadedEventStart","domContentLoadedEventEndTimestamp","domContentLoadedEventEnd","domCompleteTimestamp","domComplete","loadEventEndTimestamp","loadEventEnd","SQL_BASE_ROUTE","HISTORY_KEY","getHistoryRouteBase","getHistoryRouteForUser","userId","getHistoryRouteForLakehouse","lakehouseId","getHistoryQueryDetailsLink","lookupKey","params","URLSearchParams","toString","patchMessageEventOrigin","origin","listener","e","stopImmediatePropagation","patchedEvent","MessageEvent","data","dispatchEvent","addEventListener","removeEventListener","stringifyQueryParams","queryParams","queryParamKeys","Object","keys","map","join","WorkspaceUtils","getHostname","location","hostname","getSwitchWorkspaceUrl","workspace","useAbsoluteUrlForWorkspaceSelection","domainSuffix","basePath","o","orgId","prefix","useRegionalUrl","azureLocation","deploymentName","targetHostname","path","next_url","objectEntries","object","entries"],"mappings":";;;;;;;;;;AAAO,MAAMA,iBAAN,CAAwB;EACQ,OAAvBC,uBAAuB,CAACC,KAAD,EAA6B;IAChE,OAAOC,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoB,GAAG,IAAIC,UAAJ,CAAeJ,KAAf,CAAvB,CAAD,CAAX;;;EAGmC,OAAvBK,uBAAuB,CAACC,SAAD,EAAiC;IACpE,OAAOF,UAAU,CAACG,IAAX,CAAgBC,IAAI,CAACF,SAAD,CAApB,EAAkCG,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAxC,CAAP;;;EAG4B,OAAhBC,gBAAgB,CAACC,GAAD,EAAkC;IAC9D,MAAMC,OAAO,GAAGf,iBAAiB,CAACO,uBAAlB,CAA0CO,GAA1C,CAAhB;IACA,OAAOE,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBC,SAArB,CAA+B,MAA/B,EAAuCJ,OAAvC,EAAgD;MAAEK,IAAI,EAAE,UAAR;MAAoBC,IAAI,EAAE;KAA1E,EAAuF,IAAvF,EAA6F,CAAC,SAAD,CAA7F,CAAP;;;AAIJ;AACA;;;EACiC,OAAjBC,iBAAiB,GAAuB;IACpD,OAAON,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBK,WAArB,CACL;MACEH,IAAI,EAAE,SADR;MAEEI,MAAM,EAAE;KAHL,EAKL,IALK,EAML,CAAC,SAAD,EAAY,SAAZ,CANK,CAAP;;;EAUkC,aAAhBC,gBAAgB,CAACC,cAAD,EAA4BC,WAA5B,EAAqE;IACvG,MAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBW,SAArB,CAA+B,KAA/B,EAAsCH,cAAtC,CAAtB;IACA,MAAMI,SAAS,GAAG,MAAMd,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBa,OAArB,CAA6B,UAA7B,EAAyCJ,WAAzC,EAAsDC,OAAtD,CAAxB;IACA,OAAO5B,iBAAiB,CAACC,uBAAlB,CAA0C6B,SAA1C,CAAP;;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoC,aAAdE,cAAc,CAACC,GAAD,EAAcnB,GAAd,EAA+C;IAC/E,MAAMoB,GAAG,GAAG,IAAIC,WAAJ,EAAZ;IACA,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,CAAWJ,GAAX,CAAnB;IACA,MAAMK,EAAE,GAAGtB,MAAM,CAACC,MAAP,CAAcsB,eAAd,CAA8B,IAAIjC,UAAJ,CAAe,EAAf,CAA9B,CAAX;IACA,MAAMkC,YAAY,GAAG,MAAMxB,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAqBa,OAArB,CACzB;MACEX,IAAI,EAAE,SADR;MAEEkB,EAAE,EAAEA;KAHmB,EAKzBxB,GALyB,EAMzBsB,UANyB,CAA3B;IAQA,OAAOpC,iBAAiB,CAACC,uBAAlB,CAA0C,IAAIK,UAAJ,CAAe,CAAC,GAAGgC,EAAJ,EAAQ,GAAG,IAAIhC,UAAJ,CAAekC,YAAf,CAAX,CAAf,CAA1C,CAAP;;;AAtD2B;;ACU/B;AACA;AACA;AACA;AACO,SAASC,YAAT,CAAsBC,MAAtB,EAA0D;EAC/D,MAAM;IACJC,6BADI;IAEJC,oBAFI;IAGJC,gBAHI;IAIJC,uBAAuB,EAAEC;MACvBL,MALJ;EAMA,MAAMM,6BAA6B,GAAGC,OAAO,CAACJ,gBAAgB,IAAIE,aAArB,CAA7C;EACA,MAAMG,SAAS,GAAGD,OAAO,CAACL,oBAAoB,IAAII,6BAAzB,CAAzB,CAR+D;;;EAW/D,MAAMG,eAAe,GAAG,CAACJ,aAAD,IAAkB,CAACG,SAAnB,IAAgCP,6BAA6B,KAAK,KAA1F;EAEA,OAAO;IACL,CAACS,YAAD,GAAgB;MACdC,sBAAsB,EAAEL,6BADV;MAEdM,OAAO,EAAEN,6BAA6B,IAAIE;KAHvC;IAKL,CAACK,iBAAD,GAAqB;MACnBF,sBAAsB,EAAE,IADL;MAEnBC,OAAO,EAAEH;KAPN;IASL,CAACK,UAAD,GAAc;MACZH,sBAAsB,EAAE,IADZ;MAEZC,OAAO,EAAEL,OAAO,CAACE,eAAD;;GAXpB;AAcD;;MCzCYM,gBAAgB,GAAG;MACnBC,uBAAuB,GAAG;;ACGhC,SAASC,UAAT,CAAoBC,GAApB,EAAmD;;;EAGxD,IAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAA/B,IAA2C,OAAQA,GAAD,CAAaC,IAApB,KAA6B,UAA5E,EAAwF;IACtF,OAAOD,GAAP;;;EAEF,OAAO,IAAP;AACD;;ACXM,SAASE,oBAAT,GAAwE;EAC7E,MAAMC,MAAM,GAAG/C,MAAM,CAACgD,WAAP,CAAmBD,MAAlC;EACA,OAAO;IACLE,cAAc,EAAEjD,MAAM,CAACgD,WAAP,CAAmBE,UAAnB,CAA8BC,IADzC;IAELC,wBAAwB,EAAEL,MAAM,CAACM,eAF5B;IAGLC,qBAAqB,EAAEP,MAAM,CAACQ,YAHzB;IAILC,sBAAsB,EAAET,MAAM,CAACU,aAJ1B;IAKLC,mBAAmB,EAAEX,MAAM,CAACY,UALvB;IAMLC,mCAAmC,EAAEb,MAAM,CAACc,0BANvC;IAOLC,iCAAiC,EAAEf,MAAM,CAACgB,wBAPrC;IAQLC,oBAAoB,EAAEjB,MAAM,CAACkB,WARxB;IASLC,qBAAqB,EAAEnB,MAAM,CAACoB;GAThC;AAWD;;MCbYC,cAAc,GAAG;AAG9B;;MACaC,WAAW,GAAG;AAEpB,SAASC,mBAAT,GAA0C;EAC/C,OAAOD,WAAP;AACD;AAEM,SAASE,sBAAT,CAAgCC,MAAhC,EAAiE;EACtE,iBAAUF,mBAAmB,EAA7B,qBAA0CE,MAA1C;AACD;AAEM,SAASC,2BAAT,CAAqCC,WAArC,EAAkE;EACvE,iBAAUJ,mBAAmB,EAA7B,yBAA8CI,WAA9C;AACD;AAEM,SAASC,0BAAT,CAAoCC,SAApC,EAAuD;EAC5D,MAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoB;IACjCF,SAAS,EAAEA;GADE,CAAf;EAIA,iBAAUN,mBAAmB,EAA7B,cAAmCO,MAAM,CAACE,QAAP,EAAnC;AACD;;ACxBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,uBAAT,CAAiCC,MAAjC,EAAiD;EACtD,MAAMC,QAAQ,GAAIC,CAAD,IAAqB;IACpC,IAAIA,CAAC,CAACF,MAAF,KAAa,EAAjB,EAAqB;MACnB;;;IAEFE,CAAC,CAACC,wBAAF;IACA,MAAMC,YAAY,GAAG,IAAIC,YAAJ,CAAiB,SAAjB,EAA4B;MAAEC,IAAI,EAAEJ,CAAC,CAACI,IAAV;MAAgBN;KAA5C,CAArB;IACAjF,MAAM,CAACwF,aAAP,CAAqBH,YAArB;GANF;;EAQArF,MAAM,CAACyF,gBAAP,CAAwB,SAAxB,EAAmCP,QAAnC;EACA,OAAO,MAAMlF,MAAM,CAAC0F,mBAAP,CAA2B,SAA3B,EAAsCR,QAAtC,CAAb;AACD;;ACTD,SAASS,oBAAT,CAA8BC,WAA9B,EAAmE;EACjE,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAvB;EACA,OAAOC,cAAc,CAACrF,MAAf,GAAwB,CAAxB,cACCsF,MAAM,CAACC,IAAP,CAAYH,WAAZ,EACDI,GADC,CACIlG,GAAD,cAAYA,GAAZ,cAAmB8F,WAAW,CAAC9F,GAAD,CAA9B,CADH,EAEDmG,IAFC,CAEI,GAFJ,CADD,IAIH,EAJJ;AAKD;;AAEM,MAAMC,cAAN,CAAqB;EACD,OAAXC,WAAW,GAAG;IAC1B,OAAOnG,MAAM,CAACoG,QAAP,CAAgBC,QAAvB;;;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACqC,OAArBC,qBAAqB,CACjCC,SADiC,EAEjCC,mCAFiC,EAGjCC,YAHiC,EAKjC;IAAA,IADAC,QACA,uEADW,GACX;IACA,MAAMd,WAAmC,GAAG;MAAEe,CAAC,YAAKJ,SAAS,CAACK,KAAf;KAA/C;;IACA,IAAIJ,mCAAJ,EAAyC;MACvC,MAAMK,MAAM,GAAGN,SAAS,CAACO,cAAV,GAA2BP,SAAS,CAACQ,aAArC,GAAqDR,SAAS,CAACS,cAA9E;;MACA,IAAI,CAACT,SAAS,CAACO,cAAf,EAA+B;QAC7B,OAAOlB,WAAW,CAACe,CAAnB;;;MAEF,MAAMM,cAAc,GAAGJ,MAAM,GAAG,GAAT,GAAeJ,YAAtC;MACA,IAAIS,IAAI,GAAGR,QAAX;;MACA,IAAIR,cAAc,CAACC,WAAf,OAAiCc,cAArC,EAAqD;QACnDC,IAAI,GAAG,WAAP;;QACA,IAAIR,QAAQ,KAAK,GAAjB,EAAsB;UACpBd,WAAW,CAACuB,QAAZ,GAAuBhI,IAAI,CAACuH,QAAD,CAA3B;;;;MAGJ,yBAAkBO,cAAlB,SAAmCC,IAAnC,SAA0CvB,oBAAoB,CAACC,WAAD,CAA9D;;;IAEF,iBAAUc,QAAV,SAAqBf,oBAAoB,CAACC,WAAD,CAAzC;;;AA1CwB;;ACpB5B;;AAGA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACO,SAASwB,aAAT,CAA0BC,MAA1B,EAA8D;EACnE,OAAOvB,MAAM,CAACwB,OAAP,CAAeD,MAAf,CAAP;AACD;;;;"}