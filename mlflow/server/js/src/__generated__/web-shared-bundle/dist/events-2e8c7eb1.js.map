{"version":3,"file":"events-2e8c7eb1.js","sources":["../src/mfe-services/comms/sanitize.ts","../src/mfe-services/comms/events.ts"],"sourcesContent":["import { isDate, isPlainObject as _isPlainObject } from 'lodash';\n\nexport type SafePrimitiveValue = string | number | boolean | bigint | Date | null | undefined;\nexport type SafeArray = Array<SafeValue>;\nexport type SafeObject = { [k: string]: SafeValue };\nexport type SafeFunction = (...args: SafeValue[]) => SafeValue;\nexport type SafeValue = SafePrimitiveValue | SafeArray | SafeObject | SafeFunction;\n\nexport type IsSafe<T> = T extends SafeValue ? T : never;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction sanitizeFunction<T extends Function>(fn: T): SafeFunction {\n  const safeFunction = function () {\n    const safeArgs: any[] = [];\n    for (let i = 0; i < arguments.length; i++) {\n      // eslint-disable-next-line prefer-rest-params\n      safeArgs[i] = sanitizeValue(arguments[i]);\n    }\n    const result = fn(...safeArgs);\n    return sanitizeValue(result);\n  };\n\n  Object.defineProperty(safeFunction, 'name', { value: `${fn.name}__sanitized`, writable: false });\n\n  return safeFunction as unknown as SafeFunction;\n}\n\nfunction isPlainObject(obj: unknown): obj is Record<string, unknown> {\n  return _isPlainObject(obj);\n}\n\nconst allowedPrimitives = ['string', 'number', 'boolean', 'bigint'];\n\nfunction isSafePrimitive(obj: unknown): obj is SafePrimitiveValue {\n  return allowedPrimitives.includes(typeof obj);\n}\n\nfunction isSafeArray(obj: unknown): obj is SafeArray {\n  return Array.isArray(obj);\n}\n\n/**\n * Sanitizes an object according to the following rules:\n * - undefined, null, string, number, boolean, bigint and Date are returned as-is\n * - arrays are cloned and each element is sanitized\n * - plain objects (object literals or objects without prototype) are cloned and\n *   each enumerable string-named property is sanitized\n * - functions are wrapped with another function. Upon invocation, arguments are sanitized\n *   before the original function is called and the result is also sanitized before returning it\n *   to the caller\n *\n * - any other type of value will throw an error including:\n *   - symbols\n *   - promises\n *   - HTML elements\n * - circular structures cannot be sanitized and it will throw an error\n */\nexport function sanitizeValue<T extends SafeValue>(obj: T, visited: Set<any> = new Set()): T {\n  if (obj === undefined || obj === null) {\n    return obj;\n  }\n  if (isSafePrimitive(obj)) {\n    return obj;\n  }\n  if (isDate(obj)) {\n    return obj;\n  }\n\n  if (visited.has(obj)) {\n    throw new Error(`Cannot sanitize circular structure`);\n  }\n  visited.add(obj);\n\n  try {\n    if (isSafeArray(obj)) {\n      return obj.map((el) => sanitizeValue(el, visited)) as T;\n    }\n\n    if (typeof obj === 'function') {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- TODO(FEINF-932)\n      // @ts-ignore ts-migrate(2345) FIXME: Argument of type 'T' is not assignable to paramete... Remove this comment to see the full error message\n      return sanitizeFunction(obj) as T;\n    }\n\n    if (isPlainObject(obj)) {\n      const result: SafeObject = {};\n      Object.keys(obj).forEach((key) => {\n        result[key] = sanitizeValue(obj[key], visited);\n      });\n      return result as T;\n    }\n\n    throw new Error(`Unsupported value type encountered while sanitizing during RPC call`);\n  } finally {\n    visited.delete(obj);\n  }\n}\n","import invariant from 'invariant';\nimport { useEffect } from 'react';\n\nimport { sanitizeValue } from './sanitize';\n\n/**\n * Do not change the implementation below as it must be the same between the producers and consumers.\n */\nfunction generateEventName(type: string) {\n  return `__databricks:${type}`;\n}\n\n/**\n * This is a minimal interface to the event, which can be used to prevent default behavior.\n *\n * It is a strict subset of `CustomEvent` type and extension of this interface should be considered\n * carefully.\n */\nexport type MfeEvent<T = unknown> = {\n  preventDefault(): void;\n  detail: T;\n};\n\nexport type MfeEventListener<EventDataType> = (data: EventDataType, evt: MfeEvent<EventDataType>) => void;\n\nexport type MfeEventDefinition<EventDataType> = {\n  /**\n   * React hook to register a listener for the given event definition.\n   */\n  useListener(listener: MfeEventListener<EventDataType>): void;\n\n  /**\n   * Dispatches an event with the given data.\n   *\n   * Returns `false` if `preventDefault()` has been called on the event, `true` otherwise.\n   */\n  dispatch(data: EventDataType): boolean;\n};\n\nfunction isMfeEvent<T>(evt: unknown): evt is MfeEvent<T> {\n  return evt instanceof CustomEvent && evt.type.startsWith('__databricks');\n}\n\n/**\n * Defines an event, which should be safe to be used across MFE boundaries.\n *\n * The reason why such events are considered safe is due to the sanitization of their data. More information can be found\n * in the `./sanitize` module.\n *\n * The implementation relies on CustomEvent, which allows several benefits:\n * - Ability to prevent default behavior (useful as a simple communication channel between the producer and consumers)\n * - Synchronous dispatch (it blocks the caller, which might not be always desirable)\n *\n * Note: Once a mapping between a given event name and its type has been defined, all future changes\n * must be backward compatible considering that producers and consumers are likely to be in different\n * deployables.\n *\n * @example\n * // mfe-router.ts\n * export type UrlChangedEventData = {\n *   pathname: string;\n *   query: Record<string, string>;\n *   hash?: string;\n * }\n *\n * export const urlChanged = defineEvent<UrlChangedEventData>('router:url-changed');\n *\n * // producer\n * import { urlChanged } from '.../mfe-router';\n *\n * browserHistory.listen(location => {\n *   const { pathname, query, hash } = location;\n *   urlChanged.dispatch({ pathname, query, hash });\n * });\n *\n * // consumer\n * import { urlChanged } from '.../mfe-router';\n *\n * function MfeComponent() {\n *   const handleUrlChanged = useCallback(({ pathname }) => {\n *     setCurrentPath(pathname);\n *   }, []);\n *\n *   urlChanged.useListener(handleUrlChanged);\n * }\n */\nexport function defineEvent<EventDataType>(name: string): MfeEventDefinition<EventDataType> {\n  const customEventName = generateEventName(name);\n\n  function useListener(listener: MfeEventListener<EventDataType>) {\n    useEffect(() => {\n      const listenerAdapter = (event: Event) => {\n        invariant(isMfeEvent(event), 'Expected custom event to be delivered');\n\n        // there is no way to validate the data is in the correct shape here so we have to typecast\n        const data = event.detail as EventDataType;\n\n        listener(data, event as MfeEvent<EventDataType>);\n      };\n      window.addEventListener(customEventName, listenerAdapter);\n      return () => {\n        window.removeEventListener(customEventName, listenerAdapter);\n      };\n    }, [listener]);\n  }\n\n  function dispatch(data: EventDataType) {\n    // @ts-expect-error data is not extending SafeValue for now as it is not easy to make SafeValue allow\n    // any arbitrary function\n    const safeData = sanitizeValue(data);\n    const event = new CustomEvent(customEventName, { detail: safeData, bubbles: false, cancelable: true });\n    return window.dispatchEvent(event);\n  }\n\n  return {\n    dispatch,\n    useListener,\n  };\n}\n"],"names":["sanitizeFunction","fn","safeFunction","safeArgs","i","arguments","length","sanitizeValue","result","Object","defineProperty","value","name","writable","isPlainObject","obj","allowedPrimitives","isSafePrimitive","includes","isSafeArray","Array","isArray","visited","Set","undefined","has","Error","add","map","el","keys","forEach","key","delete","generateEventName","type","isMfeEvent","evt","CustomEvent","startsWith","defineEvent","customEventName","useListener","listener","useEffect","listenerAdapter","event","invariant","data","detail","window","addEventListener","removeEventListener","dispatch","safeData","bubbles","cancelable","dispatchEvent"],"mappings":"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"}