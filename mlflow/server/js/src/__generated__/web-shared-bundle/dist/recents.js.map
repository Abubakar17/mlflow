{"version":3,"file":"recents.js","sources":["../src/recents/fetchUtils.ts","../src/recents/retrieval.ts","../src/recents/types.ts","../src/recents/recents.ts"],"sourcesContent":["import { getCSRFToken } from '../settings/getCSRFToken';\n\nexport const fetchEndpoint = async (\n  url: URL | RequestInfo,\n  { method, headers, ...args }: RequestInit = {},\n): Promise<Response> => {\n  return fetch(url, {\n    method,\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token': getCSRFToken(),\n      ...headers,\n    },\n    ...args,\n  });\n};\n","import type { ModelBulkResponse, NodeResponse } from './APIResponseTypes';\nimport { fetchEndpoint } from './fetchUtils';\nimport type { Recent, DetailedRecent } from './recents';\n\nconst GET_NOTEBOOKS_URL = '/ajax-api/2.0/tree/get-node';\nconst LIST_MODELS_URL = '/ajax-api/2.0/mlflow/databricks/registered-models/list-by-id';\n\nexport function getNotebooksURL(id: string) {\n  return `${GET_NOTEBOOKS_URL}/?id=${id}`;\n}\n\nexport function getListModelsURL() {\n  return LIST_MODELS_URL;\n}\n\nexport async function retrieveValidNotebooks(recentsGroup: Recent[]): Promise<Array<DetailedRecent | undefined>> {\n  const rawNotebooks = await Promise.all(recentsGroup.map((recent) => fetchEndpoint(getNotebooksURL(recent.id))));\n\n  return Promise.all(\n    rawNotebooks.map(async (res, index) => {\n      const matchingRecent = recentsGroup[index];\n\n      if (!res.ok) {\n        if (res.status === 404) {\n          return undefined; // Don't throw in case of 404\n        }\n        throw new Error('Unexpected Error in API Request');\n      }\n\n      const notebook = (await res.json()) as unknown as NodeResponse;\n\n      if (notebook.info.is_deleted) {\n        return undefined;\n      }\n\n      const path = notebook.info.full_path;\n\n      return {\n        ...matchingRecent,\n        name: path.substring(path.lastIndexOf('/') + 1),\n      };\n    }),\n  );\n}\n\nexport function retrieveValidExperiments(recentsGroup: Recent[]): Promise<DetailedRecent[]> {\n  const namedExperiments = recentsGroup.map((recent) => ({ ...recent, name: 'sampleExperiment' }));\n  return new Promise((res) => setTimeout(() => res(namedExperiments), 45));\n}\n\nexport async function retrieveValidModels(recentsGroup: Recent[]): Promise<Array<DetailedRecent | undefined>> {\n  const ids = recentsGroup.map((rec) => rec.id);\n  const rawModels = await fetchEndpoint(getListModelsURL(), { method: 'POST', body: JSON.stringify({ ids: ids }) });\n\n  if (!rawModels.ok) {\n    if (rawModels.status !== 404) {\n      throw new Error('Unexpected Error in API Request');\n    }\n    return [];\n  }\n\n  const bulkResponse: ModelBulkResponse = await rawModels.json();\n\n  return bulkResponse.registered_models_databricks?.map((res) => {\n    const found = recentsGroup.find((recent) => recent.id === res.id);\n\n    if (!found) {\n      return undefined;\n    }\n\n    return { ...found, name: res.name };\n  });\n}\n\nexport function retrieveValidFeatureTables(recentsGroup: Recent[]): Promise<DetailedRecent[]> {\n  const namedFeatureTables = recentsGroup.map((recent) => ({ ...recent, name: 'sampleFeatureTable' }));\n  return new Promise((res) => setTimeout(() => res(namedFeatureTables), 15));\n}\n","// Only asset types defined here will show in recents table\n\nexport enum AssetType {\n  NOTEBOOK = 'notebook',\n  EXPERIMENT = 'experiment',\n  MODEL = 'model',\n  ENDPOINT = 'endpoint',\n  FEATURE_TABLE = 'featureTable',\n  FILE = 'file',\n  QUERY = 'query',\n  ALERT = 'alert',\n  DASHBOARD = 'dashboard',\n  WORKFLOW = 'workflow',\n}\n","/**\n * A cache storing recently viewed assets across all personas.\n * Provides a unified view, as opposed to the legacy persona-specific recents.\n */\n\nimport { groupBy, orderBy } from 'lodash';\n\nimport {\n  retrieveValidNotebooks,\n  retrieveValidExperiments,\n  retrieveValidFeatureTables,\n  retrieveValidModels,\n} from './retrieval';\nimport { AssetType } from './types';\n\n// Represents a recently opened asset\nexport interface Recent {\n  id: string;\n  type: AssetType;\n  lastAccessedTimestamp: number;\n}\n\n/**\n * @throws if window.settings, or its user and orgId keys are undefined\n * @returns {string} cache key containing user ID, org ID, 'recents' tag\n */\nfunction getCacheKey(): string {\n  const settings = (window as any).settings || (window as any).top.settings;\n\n  if (!settings?.hasOwnProperty('user') || !settings?.hasOwnProperty('orgId')) {\n    throw new Error('Invalid environment for recents: user ID or org ID not found');\n  }\n\n  return `${settings.user}-${settings.orgId}-recents`;\n}\n\ninterface RegisterRecentArgs {\n  id: Recent['id'];\n  type: Recent['type'];\n}\n\n/**\n * Adds a recently opened asset to local storage cache.\n */\nexport function registerRecent({ id, type }: RegisterRecentArgs): Recent {\n  const recent: Recent = { id, type, lastAccessedTimestamp: Date.now() };\n\n  const recentAssets = getRecents();\n  const updatedRecents: Recent[] = [recent, ...recentAssets.filter((asset) => asset.id !== id || asset.type !== type)];\n\n  setRecents(updatedRecents);\n  return recent;\n}\n\n/**\n * Reads local storage to see if the recents cache key is present. If it is,\n * returns the resulting array; otherwise returns an empty array.\n * @returns an array of Recent objects\n */\nexport function getRecents(): Recent[] {\n  const saved = window.localStorage.getItem(getCacheKey());\n  if (saved !== null) {\n    try {\n      return JSON.parse(saved);\n    } catch (e) {\n      return [];\n    }\n  }\n  return [];\n}\n\nexport interface DetailedRecent extends Recent {\n  name: string;\n}\n\nfunction setRecents(updated: Recent[]) {\n  window.localStorage.setItem(getCacheKey(), JSON.stringify(updated));\n}\n\n/**\n * Performs the necessary api calls based on asset type.\n * Calls the corresponding helper function for each type, which gets the most recent name for each entry,\n * and removes all assets not found in the API response.\n * @returns The aggregated output of the n most recent valid assets, sorted by lastAccessedTimestamp\n */\nexport async function retrieveAndValidate(numRecents = 15): Promise<DetailedRecent[]> {\n  const recents = getRecents();\n  const slicedRecents = recents.slice(0, numRecents);\n  const remaining = recents.slice(numRecents);\n  const grouped = groupBy(slicedRecents, (recent) => recent.type);\n\n  const promises: Promise<Array<DetailedRecent | undefined>>[] = [];\n\n  Object.keys(grouped).forEach((type: string) => {\n    const recentsGroup = grouped[type];\n    switch (type) {\n      case AssetType.NOTEBOOK: {\n        promises.push(retrieveValidNotebooks(recentsGroup));\n        break;\n      }\n      case AssetType.EXPERIMENT: {\n        promises.push(retrieveValidExperiments(recentsGroup));\n        break;\n      }\n      case AssetType.MODEL: // Models and Endpoints use the same API for retrieval\n      case AssetType.ENDPOINT: {\n        promises.push(retrieveValidModels(recentsGroup));\n        break;\n      }\n      case AssetType.FEATURE_TABLE: {\n        promises.push(retrieveValidFeatureTables(recentsGroup));\n        break;\n      }\n    }\n  });\n\n  let flattened;\n  try {\n    flattened = (await Promise.all(promises)).flat();\n  } catch (e) {\n    console.error('Recents failed to load');\n    return [];\n  }\n\n  const valid = flattened.filter((res) => res !== undefined) as DetailedRecent[];\n\n  const output = orderBy(valid, ['lastAccessedTimestamp'], ['desc']);\n  const updated = output\n    .map(({ id, type, lastAccessedTimestamp }) => ({ id, type, lastAccessedTimestamp })) // convert DetailedRecent to Recent\n    .concat(remaining);\n\n  setRecents(updated);\n\n  return output;\n}\n"],"names":["fetchEndpoint","url","method","headers","args","fetch","credentials","getCSRFToken","GET_NOTEBOOKS_URL","LIST_MODELS_URL","getNotebooksURL","id","getListModelsURL","retrieveValidNotebooks","recentsGroup","rawNotebooks","Promise","all","map","recent","res","index","matchingRecent","ok","status","undefined","Error","notebook","json","info","is_deleted","path","full_path","name","substring","lastIndexOf","retrieveValidExperiments","namedExperiments","setTimeout","retrieveValidModels","ids","rec","rawModels","body","JSON","stringify","bulkResponse","registered_models_databricks","found","find","retrieveValidFeatureTables","namedFeatureTables","AssetType","getCacheKey","settings","window","top","hasOwnProperty","user","orgId","registerRecent","type","lastAccessedTimestamp","Date","now","recentAssets","getRecents","updatedRecents","filter","asset","setRecents","saved","localStorage","getItem","parse","e","updated","setItem","retrieveAndValidate","numRecents","recents","slicedRecents","slice","remaining","grouped","promises","Object","keys","forEach","NOTEBOOK","push","EXPERIMENT","MODEL","ENDPOINT","FEATURE_TABLE","flattened","flat","console","error","valid","output","concat"],"mappings":"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"}