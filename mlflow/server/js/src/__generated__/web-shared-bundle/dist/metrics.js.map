{"version":3,"file":"metrics.js","sources":["../src/metrics/CoinFlipAB.tsx","../src/metrics/CoinFlipABHelpers.tsx","../src/metrics/interaction_tracing/AppSize.tsx","../src/metrics/interaction_tracing/DatabricksInteractionNames.tsx","../src/metrics/interaction_tracing/DatabricksLoadingDescriptions.tsx","../src/metrics/interaction_tracing/ReactInteractionContext.tsx","../src/metrics/interaction_tracing/ReactInteractionIDContext.tsx","../src/metrics/interaction_tracing/useReactInteractionHold.tsx","../src/metrics/interaction_tracing/ReactInteractionHold.tsx","../src/metrics/UserTimings.tsx","../src/metrics/interaction_tracing/EventTracker.tsx","../src/metrics/interaction_tracing/NetworkTiming.tsx","../src/metrics/interaction_tracing/ReactInteractionTracing.tsx","../src/metrics/interaction_tracing/ReactInteractionImperative.tsx","../src/metrics/interaction_tracing/ReactInteractionTestUtils.tsx","../src/metrics/Observability.tsx"],"sourcesContent":["export type CoinFlipABExposuresType = { [experimentName: string]: boolean };\n\nconst exposures: CoinFlipABExposuresType = {};\n\n/**\n * Returns a randomly generated boolean value that is sticky throughout the JS runtime for a\n * given experimentName. This is ideal to study short term impact of a study such as performance\n * studies. It is however not suitable to studying longer term effects such as changes to\n * user behavior resulting from being exposed to an experiment or performance\n * improvement over a long period.\n *\n * Since the group is randomized on a per-load basis, it is however less susceptible\n * to where power-users get assigned in a randomized study of a small to medium population.\n */\nexport function getCoinFlipABGroup(experimentName: string): boolean {\n  const prevValue = exposures[experimentName];\n  if (prevValue !== undefined) {\n    return prevValue;\n  }\n\n  const value = Math.random() < 0.5;\n  exposures[experimentName] = value;\n  return value;\n}\n\n/**\n * Returns the set of exposures that were generated for this SPA app session.\n * We're only interested in talking about exposures that the user has seen\n * in this session.\n */\nexport function getCoinFlipExposures(): CoinFlipABExposuresType {\n  return { ...exposures };\n}\n","import React from 'react';\n\nimport { getCoinFlipABGroup } from './CoinFlipAB';\n\nexport function ReactMemoAB<T extends React.ComponentType<any>>(\n  expName: string,\n  component: T,\n): React.MemoExoticComponent<T> | T {\n  if (getCoinFlipABGroup(expName)) {\n    return React.memo(component);\n  }\n  return component;\n}\n","function count(initiatorType: string, extension: string) {\n  let size = 0;\n  if (performance && performance.getEntriesByType) {\n    performance.getEntriesByType('resource').forEach((entry) => {\n      const resource: PerformanceResourceTiming = entry as any;\n      if (resource.initiatorType === initiatorType && resource.name.endsWith(extension)) {\n        size += resource.decodedBodySize;\n      }\n    });\n  }\n  return size;\n}\n\n/**\n * Returns the total number of (decompressed) (includes cached loads) js bytes we have used in our\n * app at this point. This will include prefetching which may interferring with what you're intending\n * to measure. After 30s we currently prefetch the entire app which will cause a large spike.\n */\nexport function getJSSize() {\n  return count('script', '.js') + count('link', '.js');\n}\n\n/**\n * Returns the total number of (decompressed) (includes cached loads) css bytes we have used in our\n * app at this point.\n */\nexport function getCSSSize() {\n  return count('link', '.css');\n}\n","export enum InteractionName {\n  /** redash interactions */\n  REDASH_UNKNOWN = 'redash.unknown',\n  REDASH_EDITOR_ADD_EXISTING_QUERY_TAB = 'redash.editor.existing.query.tab.add',\n  REDASH_EDITOR_REMOVE_TAB = 'redash.editor.tab.remove',\n  REDASH_EDITOR_SWITCH_TAB = 'redash.editor.tab.switch',\n  REDASH_EDITOR_ADD_NEW_QUERY_TAB = 'redash.editor.new.query.tab.add',\n  REDASH_EDITOR_FORMAT_QUERY = 'redash.editor.query.format',\n  REDASH_EDITOR_UNDO_QUERY = 'redash.editor.query.undo',\n  REDASH_EDITOR_TYPING_QUERY = 'redash.editor.query.typing',\n  REDASH_EDITOR_RUN_QUERY = 'redash.editor.query.run',\n  REDASH_EDITOR_SAVE_QUERY = 'redash.editor.query.save',\n  REDASH_EDITOR_SWITCH_ENDPOINT = 'redash.editor.endpoint.switch',\n  REDASH_OLD_EDITOR_FORMAT_QUERY = 'redash.old.editor.query.format',\n  REDASH_OLD_EDITOR_UNDO_QUERY = 'redash.old.editor.query.undo',\n  REDASH_OLD_EDITOR_TYPING_QUERY = 'redash.old.editor.query.typing',\n  REDASH_OLD_EDITOR_RUN_QUERY = 'redash.old.editor.query.run',\n  REDASH_OLD_EDITOR_SAVE_QUERY = 'redash.old.editor.query.save',\n\n  /** webapp interactions */\n  WEBAPP_CLUSTERS = 'webapp.clusters',\n  WEBAPP_CLUSTERS_ATTACH = 'webapp.clusters.attach',\n  WEBAPP_CLUSTERS_CREATE = 'webapp.clusters.create',\n  WEBAPP_DASHBOARD = 'webapp.dashboard',\n  WEBAPP_DEPRECATED_TABLE_ENDPOINT = 'webapp.deprecated_table_endpoint',\n  WEBAPP_EMPTY = 'webapp.empty',\n  WEBAPP_EXPERIMENTAL = 'webapp.experimental',\n  WEBAPP_FOLDER = 'webapp.folder',\n  WEBAPP_HOME = 'webapp.home',\n  WEBAPP_JOB_CREATE = 'webapp.job.create',\n  WEBAPP_JOB_LIST = 'webapp.job.list',\n  WEBAPP_JOB_RUN = 'webapp.job.run',\n  WEBAPP_JOB_UNKNOWN = 'webapp.job.unknown',\n  WEBAPP_LIBRARY = 'webapp.library',\n  WEBAPP_NOTEBOOK = 'webapp.notebook',\n  WEBAPP_NOTEBOOK_FULLY_LOADED = 'webapp.notebook.fully_loaded',\n  WEBAPP_NOTEBOOK_ADD_COMMAND = 'webapp.notebook.command.add',\n  WEBAPP_NOTEBOOK_DASHBOARD = 'webapp.notebook.dashboard',\n  WEBAPP_NOTEBOOK_PASTE_COMMAND = 'webapp.notebook.command.paste',\n  WEBAPP_NOTEBOOK_RUN_ALL_COMMAND = 'webapp.notebook.command.run_all',\n  WEBAPP_NOTEBOOK_CLICK_INTO_CELL = 'webapp.notebook.command.click_into',\n  WEBAPP_NOTEBOOK_RESULT = 'webapp.notebook.results_only',\n  WEBAPP_NOTEBOOK_REVISION = 'webapp.notebook.revision',\n  WEBAPP_NOTEBOOK_REVISION_MFFLOW = 'webapp.notebook.revision_mlflow_run',\n  WEBAPP_NOTEBOOK_SIDEVIEW = 'webapp.notebook.sideview',\n  WEBAPP_NOTEBOOK_CANCEL_COMMAND = 'webapp.notebook.cancel_command',\n  WEBAPP_NOTEBOOK_DELETE_COMMAND = 'webapp.notebook.delete_command',\n  WEBAPP_REPO_GIT_MODAL_LOAD = 'webapp.repo.load_git_modal',\n  WEBAPP_REPO_GIT_DIFF_LOAD = 'webapp.repo.load_git_diff',\n  WEBAPP_SCHEMA_BROWSING_THREE_LEVEL = 'webapp.scema_browsing.three_level',\n  WEBAPP_SCHEMA_BROWSING_TWO_LEVEL = 'webapp.scema_browsing.two_level',\n  WEBAPP_SETTING = 'webapp.setting',\n  WEBAPP_SETTING_ACCOUNTS = 'webapp.setting.accounts',\n  WEBAPP_SHELL = 'webapp.shell',\n  WEBAPP_SUBROUTE = 'webapp.subroute', // This is a mixture of different route. We'll need to split these up to get good metrics.\n  WEBAPP_NOTEBOOK_RUN_COMMAND = 'webapp.notebook.command.run',\n  WEBAPP_UNKNOWN = 'webapp.unknown',\n  WEBAPP_WORKSPACE = 'webapp.workspace',\n  WEBAPP_OPEN_DATA_TAB = 'webapp.sidebar.data_tab.open',\n  WEBAPP_CLOSE_DATA_TAB = 'webapp.sidebar.data_tab.close',\n  /**\n   * Until we instrument other panels in the sidebar, we'll use this generic interaction to signify\n   * that we closed a side panel hat we had not yet instrumented (i.e. something other than closing the data tab).\n   */\n  WEBAPP_GENERIC_CLOSE_SIDEBAR = 'webapp.sidebar.close',\n  WEBAPP_DATA_TAB_TABLE_PANEL_CHANGE_DATABASE = 'webapp.sidebar.data_tab.table_panel.database.change',\n  WEBAPP_DATA_TAB_TABLE_PANEL_CHANGE_CATALOG = 'webapp.sidebar.data_tab.table_panel.catalog.change',\n  WEBAPP_TABLE_PAGE_REFRESH = 'webapp.table.page.refresh',\n  WEBAPP_TABLE_PAGE_REFRESH_ON_ERROR = 'webapp.table.page.refresh.on.error',\n\n  /** mlflow interactions */\n  MLFLOW_EXPERIMENT_OBSERVATORY_LIST = 'mlflow.experiment.observatory.list',\n  MLFLOW_UNKNOWN = 'mlflow.unknown',\n  MLFLOW_EXPERIMENT_PAGE = 'mlflow.experiment.details',\n  MLFLOW_COMPARE_EXPERIMENTS_HOME_PAGE = 'mlflow.experiment.compare',\n  MLFLOW_RUN_PAGE = 'mlflow.experiment.run.details',\n  MLFLOW_COMPARE_RUN_PAGE = 'mlflow.experiment.run.compare',\n  MLFLOW_METRIC_PAGE = 'mlflow.metric.details',\n  MLFLOW_MODEL_LIST_PAGE = 'mlflow.models.list',\n  MLFLOW_MODEL_VERSION_PAGE = 'mlflow.model.version.details',\n  MLFLOW_MODEL_PAGE = 'mlflow.model.details',\n  MLFLOW_MODEL_PAGE_SUBPAGE = 'mlflow.model.details.subpage',\n  MLFLOW_MODEL_PAGE_SUBPAGE_WITH_NAME = 'mlflow.model.details.subpage.name',\n  MLFLOW_COMPARE_MODEL_VERSIONS_PAGE = 'mlflow.model.version.compare',\n  MLFLOW_CREATE_MODEL_PAGE = 'mlflow.model.create',\n\n  /** feature store interactions */\n  FEATURE_STORE_PAGE = 'featurestore.list',\n  FEATURE_STORE_TABLE_PAGE = 'featurestore.table',\n  FEATURE_STORE_STORE_PAGE = 'featurestore.onlinestore',\n\n  /** Filebrowser interactions */\n  FILEBROWSER_INITIAL_OPEN = 'filebrowser.initial_open',\n  FILEBROWSER_NAVIGATE_FOLDER = 'filebrowser.navigate.folder',\n  FILEBROWSER_SHARE_MODAL_OPEN = 'filebrowser.share_modal.open',\n\n  /** data explorer interactions */\n  EXPLORER_DATA_INDEX = 'data_explorer.data.index',\n  EXPLORER_DATA_CATALOG = 'data_explorer.data.catalog',\n  EXPLORER_DATA_DATABASE = 'data_explorer.data.database',\n  EXPLORER_DATA_TABLE = 'data_explorer.data.table',\n  EXPLORER_DATA_TABLE_COLUMN_TAB = 'data_explorer.data.table_column_tab',\n  EXPLORER_DATA_TABLE_SAMPLE_DATA_TAB = 'data_explorer.data.table_sample_tab',\n  EXPLORER_DATA_TABLE_METADATA_TAB = 'data_explorer.data.table_metadata_tab',\n  EXPLORER_DATA_TABLE_PERMISSIONS_TAB = 'data_explorer.data.table_permissions_tab',\n  EXPLORER_DATA_TABLE_HISTORY_TAB = 'data_explorer.data.table_history_tab',\n  EXPLORER_DATA_TABLE_LINEAGE_TAB = 'data_explorer.data.table_lineage_tab',\n  EXPLORER_UC_SEARCH_HOMEPAGE = 'data_explorer.search.homepage',\n  EXPLORER_UC_SEARCH_IN_MODAL = 'data_explorer.search.in_modal',\n  EXPLORER_UC_SEARCH_CHANGE_CATALOGS = 'data_explorer.search.change_catalogs',\n  EXPLORER_UC_SEARCH_CHANGE_DATABASES = 'data_explorer.search.change_databases',\n  EXPLORER_UC_SEARCH_CLEAR_FILTER = 'data_explorer.search.clear_filter',\n}\n","export enum LoadingDescription {\n  GENERIC = 'ReactInteractionHold',\n  GENERIC_SUSPENSE = 'DatabricksGenericSuspense',\n\n  /** Webapp Loading Description */\n  PERMISSIONS_LOADING = 'Permissions Loading',\n  CLUSTERS_ATTACH_LOADING = 'Clusters Attach Loading',\n  CLUSTERS_LOADING = 'Clusters Loading',\n  CLUSTER_LIST = 'Cluster List',\n  CLUSTER_COMMAND = 'Cluster Command',\n  TABLE_COMMAND_VIEW = 'Table Command View',\n  REQUIRE_CLUSTER_SETTINGS = 'Require Cluster Settings',\n  PENDING_COMMAND_SPINNER = 'Pending Command Spinner',\n  NOTEBOOK_COMMAND_LISTVIEW = 'Notebook Command ListView',\n  COMMAND_CANCELING = 'Command Cancelling',\n  NOTEBOOK_LOADING = 'Notebook Loading',\n  FETCHING_RESULTS = 'Fetching results',\n  CATALOG_LIST = 'Data panel: Catalogs list',\n  DATABASE_LIST = 'Data panel: Databases list',\n  TABLE_LIST = 'Data panel: Tables list',\n  TABLEGETVIEW_NAMES_LIST = 'TableGetView NamesList',\n  FETCHING_ACCOUNTS = 'Fetching Accounts',\n  JOBLIST_PERMISSIONS = 'JobList Permissions',\n  JOBLIST_LOADING = 'JobList Loading',\n  APP_INTL_PROVIDER = 'AppIntlProvider',\n  REQUIRE_DATABRICKS_SESSION = 'RequireDatabricksSession',\n  CODE_SPLIT_ROOT = 'Code Split Root',\n  FULL_APPLICATION_LAYOUT = 'Code Split FullApplicationLayout',\n  EMBEDDED_APPLICATION_LAYOUT = 'Code Split EmbeddedApplicationLayout',\n  ITEMS_TABLE_LOADING = 'ItemsTableLoading',\n  PIPELINES_TABLE_LOADING = 'Pipelines Table Loading',\n  LOADING_JOB = 'Loading Job',\n  JOBS_RUNS_LOADING = 'Jobs Runs Loading',\n  REFRESH_TABLE_METADATA = 'Refresh Table Metadata',\n  REFRESH_TABLE_METADATA_ON_ERROR = 'Refresh table metadata on error',\n  FETCHING_RECENT_NOTEBOOKS = 'Fetching Recent Notebooks',\n  NOTEBOOK_RUN_ALL = 'Notebook run all commands',\n  NOTEBOOK_RUN_ALL_CANCELED = 'Notebook run all commands canceled',\n  GIT_MODAL_LOADING = 'Git Modal Loading',\n  GIT_DIFF_LOADING = 'Git Diff Loading',\n  REQUIRE_REDASH_USER_SESSION = 'Require Redash User Session',\n\n  /** Redash Loading Description */\n  NEW_QUERY_TAB_LOADING = 'New Query Tab Loading',\n  NEW_EXISTING_QUERY_TAB_LOADING = 'New Existing Query Tab Loading',\n  RUN_QUERY_EXECUTING = 'Run Query Executing',\n  SAVE_QUERY_EXECUTING = 'Save Query Executing',\n\n  /** Mlflow Loading Description */\n  MLFLOW_IFRAME = 'MLFlow main MFE iframe',\n  MLFLOW_EXPERIMENT_LIST = 'List of experiments loading',\n  MLFLOW_EXPERIMENT_DETAILS_PAGE = 'Experiment details loading',\n  MLFLOW_HOME_PAGE = 'Experiment details loading',\n  MLFLOW_ARTIFACT_PAGE = 'Artifacts loading',\n  MLFLOW_COMPARE_RUN_PAGE = 'Compared runs details loading',\n  MLFLOW_METRIC_DETAILS_PAGE = 'Metric details loading',\n  MLFLOW_METRIC_PLOT_PANEL = 'Metric plot panel loading',\n  MLFLOW_RUN_PAGE = 'Run details loading',\n  MLFLOW_MODEL_VERSIONS_COMPARE_PAGE = 'Compared model versions loading',\n  MLFLOW_MODEL_LIST_PAGE = 'List of models loading',\n  MLFLOW_MODEL_PENDING_REQUEST_TABLE = 'Pending model requests loading',\n  MLFLOW_MODEL_DETAILS_PAGE = 'Model details loading',\n  MLFLOW_MODEL_VERSION_DETAILS_PAGE = 'Model version details loading',\n  EXPERIMENT_LIST = 'List of experiments',\n\n  /** Feature store Loading Description */\n  FEATURE_STORE_IFRAME = 'Feature store MFE iframe',\n  FEATURE_STORE_PAGE = 'Feature store list loading',\n  FEATURE_STORE_TABLE_PAGE = 'Feature store table page loading',\n  FEATURE_STORE_ONLINE_STORE_PAGE = 'Feature online store entry loading',\n\n  /** Filebrowser Loading Description */\n  FILEBROWSER_FOLDER_LOADING = 'Filebrowser Folder Loading',\n  FILEBROWSER_SHARE_LOADING = 'Filebrowser Share Modal Loading',\n\n  /** Data Explorer Loading Description */\n  DATA_PAGE = 'Data page loading',\n  CATALOGS_LIST = 'Data index catalogs list loading',\n  DATA_SCHEMA_BROWSER = 'Data schema browser loading',\n  CATALOG_DETAIL = 'Catalog detail loading',\n  CATALOG_DETAIL_DATABASES_LIST = 'Catalog detail databases list loading',\n  DATABASE_DETAIL = 'Database detail loading',\n  DATABASE_DETAIL_TABLES_LIST = 'Database detail tables list loading',\n  TABLE_DETAIL = 'Table detail loading',\n  TABLE_DETAIL_COLUMNS_LIST = 'Table detail column list loading',\n  TABLE_DETAIL_SAMPLE_DATA = 'Table detail sample data loading',\n  TABLE_DETAIL_METADATA = 'Table detail metadata tab loading',\n  TABLE_DETAIL_HISTORY_LIST = 'Table detail history tab list loading',\n  ENTITY_PERMISSIONS_LIST = 'Entity permission list', // can be catalog/database/table/external locations, etc\n  LINEAGE_TABULAR_VIEW_TABLE_ENTITY = 'Lineage tabular view table entity loading',\n  DATA_SOURCES = 'Data sources loading',\n  UC_SEARCH = 'UC search loading',\n}\n","import React from 'react';\n\nimport type { InteractionMetadata } from './DatabricksInteractionMetadata';\nimport type { InteractionName } from './DatabricksInteractionNames';\nimport type { LoadingDescription } from './DatabricksLoadingDescriptions';\nimport type { Interaction } from './ReactInteractionTracing';\n\nexport type ReactInteractionContextType = {\n  /**\n   * This should called via ReactInteractionHold/useReactInteractionHold. These APIs must be used from within\n   * the render phase of React. The first render of the subtree without any holds will be considered as\n   * the completed interaction. Note that due to how React cascading updates work, you can use useLayoutEffect\n   * to check and set a hold via a re-render but any loading signal done via useEffect will not work reliably.\n   *\n   * i.e. If you issue a fetch for some data on the network, you should track loading using\n   * ReactInteractionHold/useReactInteractionHold or via this API in a useLayoutEffect for the duration that\n   * you're fetching data on the network. Note that you should also be showing some UI affordance that you're\n   * loading something to the user. Typically this will be co-located.\n   *\n   * @allowlist Specify a list of interaction for which this loading state only applies to. For example if\n   *            a page is loading we don't want to track that a notebook is running a command, but we\n   *            want to track it if we're tracing a 'run command'.\n   */\n  trackLoading: (\n    _interaction: Interaction<InteractionName> | null,\n    _holdUID: number,\n    _loadingDescription: LoadingDescription | null,\n    allowlist?: Array<string>,\n  ) => void;\n  /**\n   * Start an interaction from within the component's context. For example this might be a form component\n   * within the context of the page, or a chart refreshing within a tooltip. When a component calls\n   * startInteraction from it's context it will cancel the parent interaction if it was ongoing and it's\n   * saying that the parent (a page, tooltip, dialog etc...) is significantly changing due to an internal\n   * interaction.\n   */\n  startInteraction: <T extends InteractionName>(\n    interactionName: T,\n    metadata?: InteractionMetadata<T>,\n    startTime?: number,\n  ) => Interaction<InteractionName> | null;\n};\n\nconst defaultValue = {\n  trackLoading: () => {},\n  startInteraction: () => null,\n};\n\nexport const ReactInteractionContext = React.createContext<ReactInteractionContextType>(defaultValue);\n","import React from 'react';\n\nimport type { InteractionName } from './DatabricksInteractionNames';\nimport type { Interaction } from './ReactInteractionTracing';\n\n/**\n * Track the current interaction ID under a different context. This is important because\n * 1) Interaction ID may not be consistent between a parent and child component during the render phase.\n * 2) We want to limit the number of components that re-render when the interaction ID changes because\n *    this happens during performance sensitive periods such as quick tab switches.\n */\nexport const ReactInteractionIDContext = React.createContext<Interaction<InteractionName> | null>(null);\n","import { useContext, useLayoutEffect } from 'react';\n\nimport { useStableUID } from '../../hooks/useStableUID';\nimport { LoadingDescription } from './DatabricksLoadingDescriptions';\nimport { ReactInteractionContext } from './ReactInteractionContext';\nimport { ReactInteractionIDContext } from './ReactInteractionIDContext';\n\nconst isSSR = typeof window === 'undefined';\nconst useLayoutEffectSSRSafe = isSSR ? () => {} : useLayoutEffect;\n\ntype ReactInteractionHoldOptions = {\n  allowlist?: Array<string>;\n};\n\nexport function useReactInteractionHold(\n  loading: boolean,\n  description?: LoadingDescription,\n  options?: ReactInteractionHoldOptions,\n) {\n  const holdUID = useStableUID();\n  const interactionID = useContext(ReactInteractionIDContext);\n  const interactionTracingContext = useContext(ReactInteractionContext);\n  const { allowlist } = options ?? {};\n\n  // Only report loading when we're in the commit phase\n  useLayoutEffectSSRSafe(() => {\n    interactionTracingContext.trackLoading(\n      interactionID,\n      holdUID,\n      loading ? description || LoadingDescription.GENERIC : null,\n      allowlist,\n    );\n  }, [interactionID, interactionTracingContext, holdUID, loading, description, allowlist]);\n\n  // Clean-up on un-mount or when we change the interaction. Move the loading state to the newly tracked interaction\n  useLayoutEffectSSRSafe(\n    () => () => {\n      interactionTracingContext.trackLoading(interactionID, holdUID, null);\n    },\n    [interactionID, holdUID, interactionTracingContext],\n  );\n}\n","import type { LoadingDescription } from './DatabricksLoadingDescriptions';\nimport { useReactInteractionHold } from './useReactInteractionHold';\n\ntype ReactInteractionHoldProps = {\n  loading: boolean;\n  description?: LoadingDescription;\n  allowlist?: Array<string>;\n};\n\n/**\n * Used when your view has a loading state that would for example block page load.\n * Simply put this component in your render tree with loading=true and a description\n * that explains what we are waiting on for debugging and aggregating purposes.\n *\n * When loading is complete either re-render with loading=false OR unmount this component.\n *\n * See `useReactInteractionHold` for more documentation.\n */\nexport function ReactInteractionHold({ loading, description, allowlist }: ReactInteractionHoldProps) {\n  useReactInteractionHold(loading, description, { allowlist });\n  return null;\n}\n","let UserTimingsV3Supported = false;\ntry {\n  (performance.measure as any)('a', { start: 0, end: 0 });\n  performance.clearMeasures('a');\n  UserTimingsV3Supported = true;\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n/**\n * Add a visible measure (block/span) in devtools for this duration.\n * This is helpful when trying to validate performance metrics against\n * screenshots.\n */\nexport function measure(name: string, start: number, end: number) {\n  if (UserTimingsV3Supported) {\n    // UserTimings V3 shipped a non backwards compatible API\n    (performance.measure as any)(name, {\n      start,\n      end,\n    });\n  }\n}\n\nexport const performanceNow =\n  typeof performance !== 'undefined' ? performance.now.bind(performance) : Date.now.bind(Date);\n","// This type is wrong for webapp, we should migrate away from this.\n// This code is shared, we can't import from globals.ts, so we redefine it here.\n// eslint-disable-next-line no-undef\ntype Timeout = NodeJS.Timeout;\n\nlet currentEvent: Event | undefined | null;\nlet isInit = false;\nlet timeout: Timeout | undefined | null;\n\nexport function eventTrackerInit() {\n  if (isInit) {\n    return;\n  }\n  isInit = true;\n  const eventTracker = (event: Event) => {\n    currentEvent = event;\n    if (!timeout) {\n      timeout = setTimeout(() => {\n        // This might not be the same event we set in the closure,\n        // but if we're in a setTimeout, we're not processing an event\n        // so clearing that one is safe.\n        currentEvent = null;\n        timeout = null;\n      }, 0);\n    }\n  };\n  document.body.addEventListener('click', eventTracker, true);\n}\n\n/**\n * If we're currently in an event handler, such as a click, return\n * the time at which the event started. In the case of hardware events\n * like a press, we will use the most accurate timestamp for the event\n * dispatch provided by the OS/Browser. This will include time to dispatch\n * the event to us if for example we blocked the main thread.\n */\nexport function getCurrentEventStart(): number | null {\n  if (!currentEvent || currentEvent.eventPhase === 0) {\n    return null;\n  }\n  return currentEvent.timeStamp;\n}\n","function calculateStallTime(entry: PerformanceResourceTiming) {\n  // Any time which is spent before the request is actually sent\n  // (the request bytes are written to the network stream) is considered stalled time\n  // irrespective of the underlying reason - dns lookup, establishing connection, SSL\n  // neg, etc.\n  // information about the sequence can be found here:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API\n  // Certain resource entries doesn't behave well - their requestStart time is 0, which breaks the total\n  // time\n  return Math.max(0, entry.requestStart - entry.startTime);\n}\n\nexport function getStalledRequestsStats(\n  startTime: number,\n  endTime: number,\n): {\n  stalledRequestsTime: number;\n  stalledRequestsCount: number;\n} {\n  let stalledRequestsTime = 0;\n  let stalledRequestsCount = 0;\n  if (performance && performance.getEntriesByType) {\n    performance.getEntriesByType('resource').forEach((entry) => {\n      const resource: PerformanceResourceTiming = entry as any;\n      if (resource.startTime < startTime || resource.responseEnd > endTime) {\n        // ignore entries which had their request sent before the time barrier (interaction start)\n        // or have finished after the time barrier\n        return;\n      }\n      stalledRequestsTime += calculateStallTime(resource);\n      stalledRequestsCount++;\n    });\n  }\n  return { stalledRequestsTime, stalledRequestsCount };\n}\n","import React, { useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { useStable } from '../../hooks/useStable';\nimport { RandomUtils } from '../../utils/RandomUtils';\nimport type { CoinFlipABExposuresType } from '../CoinFlipAB';\nimport { getCoinFlipExposures } from '../CoinFlipAB';\nimport { measure, performanceNow } from '../UserTimings';\nimport { getCSSSize, getJSSize } from './AppSize';\nimport type { InteractionMetadata } from './DatabricksInteractionMetadata';\nimport type { InteractionName } from './DatabricksInteractionNames';\nimport type { LoadingDescription } from './DatabricksLoadingDescriptions';\nimport { eventTrackerInit, getCurrentEventStart } from './EventTracker';\nimport { getStalledRequestsStats } from './NetworkTiming';\nimport { ReactInteractionContext } from './ReactInteractionContext';\nimport { ReactInteractionIDContext } from './ReactInteractionIDContext';\n\nexport enum InteractionStatus {\n  SUCCESSFUL = 'SUCCESSFUL',\n  CANCELLED = 'CANCELLED',\n  FAILED = 'FAILED',\n}\n\nexport enum InteractionType {\n  // When loading a route via a top level browser navigation\n  INITIAL_LOAD = 'INITIAL_LOAD',\n  // When loading a route via a SPA router navigation\n  NAVIGATION = 'NAVIGATION',\n  // When the route does not change and an interaction is open. i.e. Opening a popover, file browser, etc...\n  INTERACTION = 'INTERACTION',\n}\n\nexport type CompletedInteraction<T extends InteractionName> = {\n  id: string;\n  startTime: number;\n  endTime: number;\n  status: InteractionStatus;\n  completedLoadingStates: ReadonlyArray<LoadingState>;\n  name: T;\n  type: InteractionType;\n  // Revisits are faster because some resources are still loaded. This track revisits within the SPA context only.\n  isRevisit: boolean;\n  backgrounded: boolean;\n  exposures: CoinFlipABExposuresType;\n  metadata?: InteractionMetadata<T>;\n  // uncompressed bytes and includes cached.\n  jsBytesLoaded: number;\n  cssBytesLoaded: number;\n  stalledRequestsTime: number;\n  stalledRequestsCount: number;\n  timeToInteractive: number;\n};\n\nexport type Interaction<T extends InteractionName> = {\n  id: string;\n  startTime: number;\n  completedLoadingStates: Array<LoadingState>;\n  completionPromise: Promise<CompletedInteraction<T>>;\n  resolve: (value: CompletedInteraction<T>) => void;\n  status?: InteractionStatus;\n  endTime?: number;\n  name: InteractionName;\n  type: InteractionType;\n  isRevisit: boolean;\n  backgrounded: boolean;\n  metadata?: InteractionMetadata<T>;\n  jsBytesStart: number;\n  cssBytesStart: number;\n};\n\nconst isSSR = typeof window === 'undefined';\nconst visitedInteractions = new Set<string>();\n\nlet notifyList: Array<(interaction: CompletedInteraction<any>) => void> = [];\n\n/**\n * The interaction starts much before we start a React render. Typically it starts on the hardware\n * event being received by the OS (event.timestamp), or on the navigation start. We have to grab\n * the timestamp imperatively before ReactInteractionTracingImpl mounts.\n */\nconst interactions: { [key: string]: Interaction<any> } = {};\n\ntype LoadingState = {\n  description: LoadingDescription;\n  startTime: number;\n  endTime?: number;\n};\n\ntype PendingLoadingStates = { [interactionID: string]: { [key: number]: LoadingState } };\n\ntype ReactInteractionTracingProps = {\n  interaction: Interaction<InteractionName> | null;\n  children: React.ReactElement;\n  // Allow controling the gating of this component in shared projects like REDHASH\n  // that don't use window.prefs.\n  enabled?: boolean;\n};\n\nfunction getActiveInteraction(\n  interaction1: Interaction<InteractionName> | null,\n  interaction2: Interaction<InteractionName> | null,\n) {\n  if (interaction1 && interaction2) {\n    // Grab the one that was started the latest\n    if (interaction1.startTime > interaction2.startTime) {\n      return interaction1;\n    }\n    return interaction2;\n  } else if (interaction1) {\n    return interaction1;\n  }\n  return interaction2;\n}\n\nfunction ReactInteractionTracingImpl({\n  children,\n  interaction: renderTimeInteraction,\n}: Omit<ReactInteractionTracingProps, 'enabled'>) {\n  const [internalInteraction, setInternalInteraction] = useState<Interaction<InteractionName> | null>(\n    renderTimeInteraction,\n  );\n  const pendingLoadingStates = useStable<PendingLoadingStates>(() => ({}));\n  const completionRAFCheckRef = useRef<number>(0);\n  const completionIOCheckRef = useRef<IntersectionObserver | null>(null);\n  const activeInteraction = getActiveInteraction(renderTimeInteraction, internalInteraction);\n\n  const clearCompletionCheck = useCallback(() => {\n    completionIOCheckRef.current?.disconnect();\n    completionIOCheckRef.current = null;\n    cancelAnimationFrame(completionRAFCheckRef.current);\n    completionRAFCheckRef.current = 0;\n  }, []);\n\n  const checkCompletion = useCallback(\n    (interaction: Interaction<InteractionName> | null) => {\n      if (\n        !interaction ||\n        completionRAFCheckRef.current ||\n        completionIOCheckRef.current ||\n        Object.values(pendingLoadingStates[interaction.id] || {}).length !== 0\n      ) {\n        return;\n      }\n      // Intersection Observer gives us the exact timestamp that a frame occured on.\n      // We exploit this to know when we might have painted and used this to mark\n      // the interaction end.\n      // eslint-disable-next-line compat/compat\n      completionIOCheckRef.current = new IntersectionObserver((intersection) => {\n        clearCompletionCheck();\n        if (interaction !== null && Object.values(pendingLoadingStates[interaction.id] || {}).length === 0) {\n          const paintTime = intersection[0].time;\n          stopInteraction(interaction, InteractionStatus.SUCCESSFUL, paintTime);\n        }\n      });\n      completionIOCheckRef.current.observe(document.body);\n\n      // Since this is called during the commit phase, we're (1) not done painting\n      // and (2) there may be pending loading states that will register later in\n      // commit phase. We wait the interaction to complete as close as possible to\n      // the paint. One requestAnimationFrame would fire at the start of the browser\n      // paint event. The second will start at the start of the next browser paint\n      // event. Ideally IntersectionObserver has fired first but otherwise we\n      // stop the interaction after the next frame. It's unclear if it mandatory\n      // for IntersectionObserver to always fire by then. It appears in some cases\n      // it doesn't. More investigation is required here.\n      completionRAFCheckRef.current = requestAnimationFrame(() => {\n        completionRAFCheckRef.current = requestAnimationFrame(() => {\n          clearCompletionCheck();\n          if (interaction !== null && Object.values(pendingLoadingStates[interaction.id] || {}).length === 0) {\n            stopInteraction(interaction, InteractionStatus.SUCCESSFUL);\n          }\n        });\n      });\n    },\n    [pendingLoadingStates, clearCompletionCheck],\n  );\n\n  useLayoutEffect(() => {\n    // Check if we mount without any pending placeholders\n    checkCompletion(activeInteraction);\n    return () => {\n      clearCompletionCheck();\n      // On unmount or an interaction change, cancel the interaction\n      stopInteraction(activeInteraction, InteractionStatus.CANCELLED);\n    };\n  }, [activeInteraction, checkCompletion, clearCompletionCheck]);\n\n  const interactionContext = useMemo(\n    () => ({\n      trackLoading: (\n        interaction: Interaction<InteractionName> | null,\n        holdUID: number,\n        loadingDescription: LoadingDescription | null,\n        allowlist?: Array<string>,\n      ) => {\n        if (!interaction) {\n          return;\n        }\n        if (!interaction || interaction.endTime !== undefined) {\n          return;\n        }\n        const pendingLoadingStatesForThisInteraction = pendingLoadingStates[interaction.id] || {};\n        pendingLoadingStates[interaction.id] = pendingLoadingStatesForThisInteraction;\n        const prevLoadingState = pendingLoadingStatesForThisInteraction[holdUID];\n        const allowed = allowlist === undefined || allowlist.find((allow) => allow === interaction.name);\n        // If the client isn't careful they may cause unnessary tracking. i.e. creating\n        // a new allowlist every re-render. Let's fail safe and avoid retracking\n        // identical loading states.\n        if (prevLoadingState && allowed && prevLoadingState.description === loadingDescription) {\n          return;\n        }\n        delete pendingLoadingStatesForThisInteraction[holdUID];\n\n        if (prevLoadingState) {\n          prevLoadingState.endTime = performanceNow();\n          measure(\n            'React Loading State: ' + prevLoadingState.description,\n            prevLoadingState.startTime,\n            prevLoadingState.endTime,\n          );\n          interactions[interaction.id]?.completedLoadingStates.push(prevLoadingState);\n        }\n\n        if (allowed && loadingDescription) {\n          pendingLoadingStatesForThisInteraction[holdUID] = {\n            description: loadingDescription,\n            startTime: performanceNow(),\n          };\n          // If we added a new loading state we need to reset the completion check which\n          // relies on waiting for a full frame without any loading states.\n          clearCompletionCheck();\n        } else {\n          checkCompletion(interaction);\n        }\n      },\n      startInteraction: <T extends InteractionName>(\n        interactionName: T,\n        metadata?: InteractionMetadata<T>,\n        startTime?: number,\n      ) => {\n        const newInteraction = startInteraction(InteractionType.INTERACTION, interactionName, metadata, startTime);\n        // Kick off a re-rendering of the root component that will track the new interaction\n        setInternalInteraction(newInteraction);\n        return newInteraction;\n      },\n    }),\n    [pendingLoadingStates, checkCompletion, clearCompletionCheck],\n  );\n\n  return (\n    <ReactInteractionContext.Provider value={interactionContext}>\n      <ReactInteractionIDContext.Provider value={activeInteraction}>{children}</ReactInteractionIDContext.Provider>\n    </ReactInteractionContext.Provider>\n  );\n}\n\nfunction waitForInteractive(cb: () => void) {\n  /**\n   * It's hard to get a good definition of interactive. But we frequently complete an interaction\n   * and do a lot of post-processing immediately after. So we'll grab the duration of two round\n   * trip through the event queue which should approximate how long it takes us to respond to\n   * user input and penalize interactions that do a lot of work that blocks interactictivity.\n   */\n  setTimeout(() => {\n    setTimeout(() => {\n      cb();\n    });\n  });\n}\n\nexport function stopInteraction(\n  interactionInitial: Interaction<InteractionName> | null,\n  completionStatus: InteractionStatus,\n  endTimeInitial?: number,\n) {\n  // Make mutable\n  const interaction = interactionInitial;\n  if (!interaction) {\n    return;\n  }\n  if (!interaction || interaction.endTime !== undefined) {\n    return;\n  }\n  const endTime = endTimeInitial ?? performanceNow();\n  interaction.status = completionStatus;\n  interaction.endTime = endTime;\n  measure('React Interaction ' + interaction.name + ':' + completionStatus, interaction.startTime, endTime);\n  waitForInteractive(() => {\n    const completedInteraction = {\n      id: interaction.id,\n      startTime: interaction.startTime,\n      endTime: endTime,\n      status: completionStatus,\n      completedLoadingStates: interaction.completedLoadingStates,\n      isRevisit: interaction.isRevisit,\n      type: interaction.type,\n      name: interaction.name,\n      backgrounded: interaction.backgrounded,\n      exposures: getCoinFlipExposures(),\n      metadata: interaction.metadata,\n      timeToInteractive: performanceNow(),\n      jsBytesLoaded: getJSSize() - interaction.jsBytesStart,\n      cssBytesLoaded: getCSSSize() - interaction.cssBytesStart,\n      ...getStalledRequestsStats(interaction.startTime, endTime),\n    };\n    interaction.resolve(completedInteraction);\n    notifyList.forEach((callback) => callback(completedInteraction));\n    if ((window as any)?.prefs?.get('logReactInteractionTracing')) {\n      // eslint-disable-next-line no-console -- see go/js/lint/no-console\n      console.log('Completed React Interaction', completedInteraction);\n    }\n  });\n}\n\nexport function ReactInteractionTracing(props: ReactInteractionTracingProps): React.ReactElement {\n  if (\n    !isSSR &&\n    (props.enabled === true || (props.enabled === undefined && (window as any)?.prefs?.get('reactInteractionTracing')))\n  ) {\n    return <ReactInteractionTracingImpl {...props} />;\n  }\n  return props.children;\n}\n\n/**\n * This is the start of the interaction. This typically happen for an\n * imperative event handler or the browser's navigation start event.\n * This should be triggered before the React render starts because\n * this is often late into the interaction.\n *\n * This will internally start an interaction and return the ID. This ID\n * should be passed to a <ReactInteractionTracing> component. When that\n * component renders & commits without any loading state then the\n * interaction will be automatically completed. You may use\n * `waitForInteraction` to await and use the interaction results to log.\n */\nexport function startInteraction<T extends InteractionName>(\n  type: InteractionType,\n  name: T,\n  metadata?: InteractionMetadata<T>,\n  startTime?: number | null,\n): Interaction<InteractionName> {\n  const uid = RandomUtils.generateUUID();\n  let interactionResolve = (_: CompletedInteraction<T>) => {};\n  const completionPromise = new Promise<CompletedInteraction<T>>((resolve) => {\n    interactionResolve = resolve;\n  });\n  const isRevisit = visitedInteractions.has(name);\n  visitedInteractions.add(name);\n  interactions[uid] = {\n    id: String(uid),\n    startTime: startTime ?? getCurrentEventStart() ?? performanceNow(),\n    completionPromise,\n    resolve: interactionResolve,\n    completedLoadingStates: [],\n    type,\n    name,\n    isRevisit,\n    backgrounded: isSSR || document.visibilityState !== 'visible',\n    metadata,\n    jsBytesStart: type === InteractionType.INITIAL_LOAD ? 0 : getJSSize(),\n    cssBytesStart: type === InteractionType.INITIAL_LOAD ? 0 : getCSSSize(),\n  };\n  if (!isSSR) {\n    const visibilityCallback = function () {\n      if (document.visibilityState !== 'visible') {\n        interactions[uid].backgrounded = true;\n      }\n    };\n    document.addEventListener('visibilitychange', visibilityCallback);\n    completionPromise.finally(() => {\n      document.removeEventListener('visibilitychange', visibilityCallback);\n    });\n    eventTrackerInit();\n  }\n  return interactions[uid];\n}\n\n/**\n * Helper to start the first navigation interaction. This should only be\n * called once.\n */\nexport function startInteractionInitialLoad(name: InteractionName): Interaction<InteractionName> {\n  return startInteraction(InteractionType.INITIAL_LOAD, name, undefined, 0);\n}\n\n/**\n * Use to wait on and get the results of an interaction. If given a valid\n * interaction ID then you'll receive a promise of the interaction results\n * that can be used to log the results.\n *\n * NOTE: It is NOT recommended to make any behavioral changes to the\n * application based on this metrics. For instance it may be tempting to\n * trigger background work only after a page load. After this is a bad idea\n * because 1) performance metrics are not always correct, 2) you may cause\n * the metric not to complete if you accidental form a loading cycle,\n * 3) you may hurt performance.\n */\nexport function waitForInteraction(\n  interaction: Interaction<InteractionName> | null,\n): Promise<CompletedInteraction<any>> | null {\n  if (!interaction) {\n    return null;\n  }\n  return interaction.completionPromise;\n}\n\n/**\n * Subscribe to all interaction completion event. This is useful to log all\n * results.\n */\nexport function notifyOnInteractionComplete(callback: (interaction: CompletedInteraction<any>) => void) {\n  notifyList.push(callback);\n  return () => {\n    notifyList = notifyList.filter((cb) => cb !== callback);\n  };\n}\n","import type { InteractionMetadata } from './DatabricksInteractionMetadata';\nimport type { InteractionName } from './DatabricksInteractionNames';\nimport type { Interaction, InteractionType } from './ReactInteractionTracing';\nimport { InteractionStatus, startInteraction, stopInteraction } from './ReactInteractionTracing';\n\nconst activeImperativeInteractions = new Map<InteractionType, Map<InteractionName, Interaction<InteractionName>>>();\n\nexport function startImperativeInteraction<T extends InteractionName>(\n  type: InteractionType,\n  name: T,\n  metadata?: InteractionMetadata<T>,\n  startTime: number | null = performance.now(),\n) {\n  const interaction = startInteraction(type, name, metadata, startTime);\n  const interactionMapByType =\n    activeImperativeInteractions.get(type) ?? new Map<InteractionName, Interaction<InteractionName>>();\n  activeImperativeInteractions.set(type, interactionMapByType);\n  const prevInteraction = interactionMapByType.get(name);\n  interactionMapByType.set(name, interaction);\n  if (prevInteraction) {\n    stopInteraction(prevInteraction, InteractionStatus.CANCELLED);\n  }\n  interactionMapByType.set(name, interaction);\n}\n\nexport function stopImperativeInteraction(\n  type: InteractionType,\n  name: InteractionName,\n  endTimeInitial: number = performance.now(),\n): Interaction<InteractionName> | null {\n  const interactionMapByType =\n    activeImperativeInteractions.get(type) ?? new Map<InteractionName, Interaction<InteractionName>>();\n  const interaction = interactionMapByType.get(name);\n  if (!interaction) {\n    return null;\n  }\n  stopInteraction(interaction, InteractionStatus.SUCCESSFUL, endTimeInitial);\n  return interaction;\n}\n\nexport function testReset() {\n  activeImperativeInteractions.clear();\n}\n","export async function paintCompleteAndInteractive() {\n  const waitRAF = () => new Promise((resolve) => requestAnimationFrame(resolve));\n  const waitSetTimeout = () => new Promise((resolve) => setTimeout(resolve));\n  await waitRAF();\n  await waitRAF();\n  // Wait for interactive\n  await waitSetTimeout();\n  await waitSetTimeout();\n}\n","/**\n * This module serves as the 'public API' for observability.\n */\n\nimport type { MetricTag } from './MetricTag';\nimport type { MetricDefinitions } from './__generated__/MetricDefinitions';\n\ndeclare global {\n  let DATABRICKS_MFE_ID: string | null | undefined;\n}\n\ntype recordEventFuncType = (metric: string, tags: Record<string, any>, eventData?: string) => void;\ntype jsExceptionMeasurementTagsFuncType = (additionalTags?: MetricTag) => MetricTag;\n\nlet recordEventFunc: recordEventFuncType | undefined;\nlet jsExceptionMeasurementTagsFunc: jsExceptionMeasurementTagsFuncType = (a) => a ?? {};\nconst bufferRecordEvent: Array<() => void> = [];\n\n/**\n * Log the error to our error exception service and the Chrome DevTools console.\n *\n * Usage:\n *   * logError(ex);\n *   * logError(\"Failed to init MFE\", ex);\n *   * logError(\"Unexpected\");\n */\nexport function logError(messageOrError: unknown, error?: Error, additionalTags?: MetricTag) {\n  logJSException(messageOrError, error, additionalTags);\n\n  // eslint-disable-next-line no-console -- Accepted usage\n  console.error(messageOrError, error);\n}\n\n/**\n * Log the error to our error exception service and the Chrome DevTools console.\n *\n * A warning does not raise an ES ticket unlike a logError(...). It should be used as an FYI\n * that certain code paths or recoverable flows are hit. For instance if performance optimizations\n * like preloading aren't working we can use warning observability to track it.\n */\nexport function logWarning(messageOrError: unknown, error?: unknown, additionalTags?: MetricTag) {\n  logJSException(messageOrError, error, { ...additionalTags, jsExceptionSeverity: 'warning' });\n\n  // eslint-disable-next-line no-console -- Accepted usage\n  console.warn(messageOrError, error);\n}\n\n/**\n * Log an event to logfood under usage_logs.\n *\n * Differs from window.recordEvent in that 1) its always define, 2) buffers before init,\n * 3) reduces window.* API usage which will minimize the MFE API surface.\n */\nexport function recordEvent(eventName: MetricDefinitions, additionalTags?: MetricTag, eventData?: string) {\n  const recordEventImpl = () => {\n    recordEventFunc?.(eventName, { mfeId: DATABRICKS_MFE_ID, ...additionalTags }, eventData);\n  };\n  if (!recordEventFunc) {\n    // Bufer for later\n    bufferRecordEvent.push(recordEventImpl);\n    return;\n  }\n\n  recordEventImpl();\n}\n\n/**\n * Only use in App init to provide a logger module. recordEvent will buffer until this is called.\n */\nexport function registerRecordEvent(\n  recordEventFuncParam: recordEventFuncType,\n  jsExceptionMeasurementTagsFuncParam: jsExceptionMeasurementTagsFuncType,\n) {\n  recordEventFunc = recordEventFuncParam;\n  jsExceptionMeasurementTagsFunc = jsExceptionMeasurementTagsFuncParam;\n  // Flush pending startup logs\n  bufferRecordEvent.forEach((cb) => cb());\n  bufferRecordEvent.length = 0;\n}\n\nexport function unregisterRecordEvent() {\n  recordEventFunc = undefined;\n  jsExceptionMeasurementTagsFunc = (a) => a ?? {};\n}\n\nfunction logJSException(messageOrError: unknown, errorIn?: unknown, additionalTags?: MetricTag) {\n  let error: Error;\n  if (messageOrError instanceof Error) {\n    error = messageOrError;\n  } else if (errorIn instanceof Error) {\n    error = errorIn;\n  } else if (!messageOrError && errorIn) {\n    error = new Error(String(errorIn));\n  } else {\n    error = new Error(String(messageOrError));\n  }\n\n  let message: string | undefined;\n  if (typeof messageOrError === 'string') {\n    message = messageOrError;\n  } else if (messageOrError instanceof Error) {\n    message = messageOrError.message;\n  } else {\n    message = 'No error message provided';\n  }\n\n  const tags = jsExceptionMeasurementTagsFunc({\n    eventType: 'jsExceptionV3',\n    ...additionalTags,\n    jsExceptionMessage: message,\n  });\n\n  recordEvent('jsException', tags, error && error.stack && error.stack.toString());\n}\n"],"names":["exposures","getCoinFlipABGroup","experimentName","prevValue","undefined","value","Math","random","getCoinFlipExposures","ReactMemoAB","expName","component","React","memo","count","initiatorType","extension","size","performance","getEntriesByType","forEach","entry","resource","name","endsWith","decodedBodySize","getJSSize","getCSSSize","InteractionName","LoadingDescription","defaultValue","trackLoading","startInteraction","ReactInteractionContext","createContext","ReactInteractionIDContext","isSSR","window","useLayoutEffectSSRSafe","useLayoutEffect","useReactInteractionHold","loading","description","options","holdUID","useStableUID","interactionID","useContext","interactionTracingContext","allowlist","GENERIC","ReactInteractionHold","UserTimingsV3Supported","measure","start","end","clearMeasures","e","performanceNow","now","bind","Date","currentEvent","isInit","timeout","eventTrackerInit","eventTracker","event","setTimeout","document","body","addEventListener","getCurrentEventStart","eventPhase","timeStamp","calculateStallTime","max","requestStart","startTime","getStalledRequestsStats","endTime","stalledRequestsTime","stalledRequestsCount","responseEnd","InteractionStatus","InteractionType","visitedInteractions","Set","notifyList","interactions","getActiveInteraction","interaction1","interaction2","ReactInteractionTracingImpl","children","interaction","renderTimeInteraction","internalInteraction","setInternalInteraction","useState","pendingLoadingStates","useStable","completionRAFCheckRef","useRef","completionIOCheckRef","activeInteraction","clearCompletionCheck","useCallback","current","disconnect","cancelAnimationFrame","checkCompletion","Object","values","id","length","IntersectionObserver","intersection","paintTime","time","stopInteraction","SUCCESSFUL","observe","requestAnimationFrame","CANCELLED","interactionContext","useMemo","loadingDescription","pendingLoadingStatesForThisInteraction","prevLoadingState","allowed","find","allow","completedLoadingStates","push","interactionName","metadata","newInteraction","INTERACTION","_jsx","waitForInteractive","cb","interactionInitial","completionStatus","endTimeInitial","status","completedInteraction","isRevisit","type","backgrounded","timeToInteractive","jsBytesLoaded","jsBytesStart","cssBytesLoaded","cssBytesStart","resolve","callback","prefs","get","console","log","ReactInteractionTracing","props","enabled","uid","RandomUtils","generateUUID","interactionResolve","_","completionPromise","Promise","has","add","String","visibilityState","INITIAL_LOAD","visibilityCallback","finally","removeEventListener","startInteractionInitialLoad","waitForInteraction","notifyOnInteractionComplete","filter","activeImperativeInteractions","Map","startImperativeInteraction","interactionMapByType","set","prevInteraction","stopImperativeInteraction","testReset","clear","paintCompleteAndInteractive","waitRAF","waitSetTimeout","recordEventFunc","jsExceptionMeasurementTagsFunc","a","bufferRecordEvent","logError","messageOrError","error","additionalTags","logJSException","logWarning","jsExceptionSeverity","warn","recordEvent","eventName","eventData","recordEventImpl","mfeId","DATABRICKS_MFE_ID","registerRecordEvent","recordEventFuncParam","jsExceptionMeasurementTagsFuncParam","unregisterRecordEvent","errorIn","Error","message","tags","eventType","jsExceptionMessage","stack","toString"],"mappings":"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"}